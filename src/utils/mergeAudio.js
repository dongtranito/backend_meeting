import ffmpeg from 'fluent-ffmpeg';
import ffmpegPath from 'ffmpeg-static';
import fs from 'fs';
import os from "os";
import path from "path";
import axios from 'axios';
import { db, admin } from "../config/firebaseService.js";
import { parseFile } from 'music-metadata';
import { uploadToS3 } from '../config/s3Service.js';
ffmpeg.setFfmpegPath(ffmpegPath);

export async function mergeGroupVoicesUtil(groupId) {
  const groupRef = db.collection("groups").doc(groupId);

  let memberVoices = [];
  const tmpRoot = os.tmpdir(); // üìÇ th∆∞ m·ª•c t·∫°m c·ªßa h·ªá th·ªëng, lu√¥n c√≥
  const tmpDir = path.join(tmpRoot, `group_${groupId}`);
  const concatFile = path.join(tmpDir, "concat.txt");
  const outputFile = path.join(tmpDir, `merged_group_${groupId}.mp3`);


  try {
    // üîπ T·∫°o th∆∞ m·ª•c t·∫°m (n·∫øu ch∆∞a c√≥)
    fs.mkdirSync(tmpDir, { recursive: true });

    // 1Ô∏è‚É£ L·∫•y danh s√°ch member
    const membersSnapshot = await groupRef.collection("members").get();
    if (membersSnapshot.empty) {
      throw new Error("Group ch∆∞a c√≥ th√†nh vi√™n n√†o");
    }

    // 2Ô∏è‚É£ L·∫•y sampleVoice t·ª´ t·∫•t c·∫£ user trong group
    for (const doc of membersSnapshot.docs) {
      const userId = doc.id;
      const userDoc = await db.collection("users").doc(userId).get();
      const userData = userDoc.data();

      if (userData?.sampleVoice) {
        memberVoices.push({
          id: userId,
          name: doc.data().name || "Unknown",
          url: userData.sampleVoice,
        });
      }
    }

    if (memberVoices.length === 0) {
      throw new Error("Kh√¥ng c√≥ th√†nh vi√™n n√†o c√≥ sampleVoice");
    }

    console.log(`üéß ƒêang t·∫£i ${memberVoices.length} file voice...`);

    // 3Ô∏è‚É£ Download song song to√†n b·ªô file audio
    await Promise.all(memberVoices.map(async (v, i) => {
      const res = await axios({ url: v.url, responseType: "arraybuffer" });
      const filePath = `${tmpDir}/voice_${i + 1}.mp3`;
      fs.writeFileSync(filePath, Buffer.from(res.data));
      v.file = filePath;
    }));

    // 4Ô∏è‚É£ T·∫°o file concat list cho ffmpeg
    const concatList = memberVoices
      .map(v => `file '${path.resolve(v.file)}'`)  // d√πng absolute path
      .join('\n')
      
    fs.writeFileSync(concatFile, concatList);

    console.log(`üîÑ B·∫Øt ƒë·∫ßu merge b·∫±ng ffmpeg...`);
    // üëá Th√™m ch·ªó n√†y
    console.log("üìÑ Checking concat.txt path:", concatFile);
    console.log("üì¶ Exists?", fs.existsSync(concatFile));
    if (fs.existsSync(concatFile)) {
      console.log("üìú Content:\n", fs.readFileSync(concatFile, "utf-8"));
    } else {
      console.log("üö® concat.txt NOT FOUND ‚Äî check your tmpDir path or file write!");
    }
    // 5Ô∏è‚É£ Merge audio files
    await new Promise((resolve, reject) => {
      ffmpeg()
        .input(concatFile)
        .inputOptions(['-f', 'concat', '-safe', '0'])
        .outputOptions(['-acodec copy'])
        .save(outputFile)
        .on('end', resolve)
        .on('error', reject);
    });

    console.log(`‚úÖ Merge ho√†n t·∫•t: ${outputFile}`);

    // 6Ô∏è‚É£ L·∫•y metadata ƒë·ªÉ t√≠nh t·ªïng th·ªùi l∆∞·ª£ng
    const metadata = await parseFile(outputFile);
    const totalTime = metadata.format.duration; // gi√¢y

    // 7Ô∏è‚É£ Upload l√™n S3
    const fileBuffer = fs.readFileSync(outputFile);
    const uploadResult = await uploadToS3({
      folder: "groupSampleVoice",
      fileName: `${groupId}_merged.mp3`,
      fileBuffer,
      contentType: "audio/mpeg",
    });

    // 8Ô∏è‚É£ Map speaker
    const speakerMap = memberVoices.map((v, index) => ({
      speaker: `Speaker ${index + 1}`,
      name: v.name,
    }));

    // 9Ô∏è‚É£ Update Firestore
    await groupRef.set({
      mergedVoice: {
        url: uploadResult.url,
        speakerMap,
        totalTime,
        createdAt: new Date().toISOString(),
      },
    }, { merge: true });

    console.log(`üì§ Upload th√†nh c√¥ng l√™n S3`);
    console.log(`üßæ URL: ${uploadResult.url}`);
    console.log(`üïí T·ªïng th·ªùi l∆∞·ª£ng: ${totalTime.toFixed(2)} gi√¢y`);

    // ‚úÖ Return k·∫øt qu·∫£
    return {
      mergedUrl: uploadResult.url,
      totalTime,
      speakerMap,
    };

  } catch (error) {
    console.error("‚ùå L·ªói khi merge voice:", error.message);
    throw error;

  } finally {
    try {
      if (fs.existsSync(outputFile)) fs.unlinkSync(outputFile);
      if (fs.existsSync(concatFile)) fs.unlinkSync(concatFile);
      memberVoices.forEach(v => v.file && fs.existsSync(v.file) && fs.unlinkSync(v.file));
      if (fs.existsSync(tmpDir)) fs.rmdirSync(tmpDir, { recursive: true });
      console.log("üßπ ƒê√£ d·ªçn s·∫°ch file t·∫°m");
    } catch (cleanupErr) {
      console.warn("‚ö†Ô∏è L·ªói khi cleanup:", cleanupErr.message);
    }
  }
}

