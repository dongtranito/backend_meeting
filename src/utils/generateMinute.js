import PizZip from "pizzip";
import Docxtemplater from "docxtemplater";
import fs from "fs";
import mammoth from "mammoth"
import axios from "axios";
import { z } from "zod";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { uploadToS3 } from "../config/s3Service.js";



export async function extractPlaceholdersWithDocx(buffer) {
    try {
        const zip = new PizZip(buffer);
        const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });
        const placeholders = new Set();
        const text = doc.getFullText();
        const regex = /{\s*(.*?)\s*}/g;
        let match;
        while ((match = regex.exec(text)) !== null) {
            placeholders.add(match[1].trim());
        }

        if (placeholders.size === 0) {
            throw new Error("Kh√¥ng t√¨m th·∫•y placeholder n√†o trong file DOCX.");
        }
        return Array.from(placeholders);
    } catch (error) {
        throw new Error(`L·ªói khi tr√≠ch xu·∫•t placeholder t·ª´ file Word: ${error.message}`);
    }
}

export async function loadDocxBufferFromUrl(url) {
    const res = await axios.get(url, { responseType: "arraybuffer" });
    return Buffer.from(res.data);
}
// ƒê√¢y l√† data ƒë∆∞·ª£c g·ªüi ƒë·ªÉ t·∫°o transcript
// const data = {
//   urlSampleMinute: meetingData.minutes.sampleMinute,
//   title: meetingData.title || "",
//   description: meetingData.description || "",
//   scheduledAt: meetingData.scheduledAt.toDate().toISOString() || "",
//   transcriptText: transcript.text || "",
//   metaData: meetingData.meta_data || {},
// };
async function askAiToGenerateData(templateText, placeholders, data) {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) throw new Error("‚ö†Ô∏è GEMINI_API_KEY not set in .env");
    const Schema = z.object(
        Object.fromEntries(placeholders.map((key) => [key, z.string()]))
    );


    const model = new ChatGoogleGenerativeAI({
        model: "gemini-2.0-flash",
        apiKey,
    }).withStructuredOutput(Schema, { method: "json_schema" });

    const prompt = `
B·∫°n l√† h·ªá th·ªëng t·∫°o d·ªØ li·ªáu m·∫´u cho file Word c√≥ ch·ª©a placeholder, v√† n·ªôi dung tham chi·∫øu.
N·ªôi dung tham chi·∫øu: ti√™u ƒë·ªÅ cu·ªôc h·ªçp l√† ${data.title}, M√¥ t·∫£ cu·ªôc h·ªçp l√† ${data.description}, l·ªãch cu·ªôc h·ªçp l√† ${data.scheduledAt}, v√† transcipt c·ªßa cu·ªôc h·ªçp l√† ${data.transcriptText}, metadata cu·ªôc h·ªçp l√† ${data.metaData} 

Danh s√°ch placeholder:
${JSON.stringify(placeholders)}

N·ªôi dung file DOCX (tr√≠ch t·ª´ mammoth):
------------------------
${templateText}
------------------------

üéØ Y√™u c·∫ßu:
- T·∫°o ra object JSON c√≥ key "data".
- Trong "data", m·ªói key l√† t√™n placeholder, value l√† d·ªØ li·ªáu m·∫´u h·ª£p l√Ω (v√≠ d·ª•: t√™n, ƒë·ªãa ƒëi·ªÉm, ng√†y, n·ªôi dung cu·ªôc h·ªçp...).
- D·ªØ li·ªáu ph·∫£i l√† chu·ªói text (string) ƒë∆°n gi·∫£n, kh√¥ng l·ªìng object con.
- Tr·∫£ v·ªÅ CH·ªà JSON, kh√¥ng gi·∫£i th√≠ch th√™m.
- Ph·∫£i d·ª±a v√†o n·ªôi dung tham chi·∫øu ƒë·ªÉ t·∫°o ra c√°c placeholder. kh√¥ng ƒë∆∞·ª£c b·ªãa chuy·ªán. n·∫øu n·ªôi dung tham chi·∫øu kh√¥ng c√≥ th√¨ tr·∫£ l·ªùi ki·ªÉu #######. ƒë·∫∑c bi·ªát ph·∫£i d·ª±a v√†o transcipt ƒë·ªÉ t·∫°o ra n·ªôi dung cho bi√™n b·∫£n

V√≠ d·ª• ƒë·ªãnh d·∫°ng:
{
  "data": {
    "so": "01/2025",
    "diadiem": "Ph√≤ng h·ªçp A1",
    "ngay": "21",
    "thang": "10",
    "nam": "2025",
    "veviec": "Tri·ªÉn khai d·ª± √°n m·ªõi",
    ...
  }
}
`;

    const result = await model.invoke([{ role: "user", content: prompt }]);
    return result;
}
export async function renderDocx(buffer, placeholder) {
    const zip = new PizZip(buffer);
    const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });
    doc.render(placeholder);
    const outputBuffer = doc.getZip().generate({ type: "nodebuffer" });
    return outputBuffer;
}

export async function generateMinute(data) {
    try {
        const buffer = await loadDocxBufferFromUrl(data.urlSampleMinute);  //c√°i n√†y l√† url bi√™n b·∫£n m·∫´u
        // const buffer = await loadLocalDocx("./bienbancuochop.docx");

        const { value: templateText } = await mammoth.extractRawText({ buffer });
        const placeholders = await extractPlaceholdersWithDocx(buffer);

        const aiResult = await askAiToGenerateData(templateText, placeholders, data);
        const outputBuffer = await renderDocx (buffer,aiResult) // c√≥ nghƒ©a l√† render xong r·ªìi m·ªõi buffer c·ªßa n√≥

        const fileName = `minute_${Date.now()}.docx`;
        const { url } = await uploadToS3({
            folder: "officeMinute",
            fileName,
            fileBuffer: outputBuffer,
            contentType:
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        });
        return {
            url,
            aiResult
        };

    } catch (error) {
        throw new Error(error.message || "b·ªã l·ªói ·ªü b∆∞·ªõc t∆∞∆°ng t√°c v·ªõi llm");
    }
}