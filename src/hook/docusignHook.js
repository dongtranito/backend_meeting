import { db } from "../config/firebaseService.js";
import { uploadToS3 } from "../config/s3Service.js";
import dotenv from "dotenv";

import * as docusignService from "../services/docusignService.js";

dotenv.config();

export async function handleDocuSignWebhook(req, res) {
    try {

        const body = req.body;
        console.log("ƒë√£ c√≥ hook g·ªçi")
        console.log(body)
        if (body.event !== "envelope-completed") {
            return res.status(200).json({ message: "Kh√¥ng x·ª≠ l√Ω event n√†y." });
        }

        const envelopeId = body.data?.envelopeId;
        if (!envelopeId) throw new Error("Thi·∫øu envelopeId trong webhook.");

        console.log("Nh·∫≠n webhook ho√†n th√†nh k√Ω:", envelopeId);

        const pdfBuffer = await docusignService.downloadSignedPDF(envelopeId);

        const fileName = `signed_${envelopeId}.pdf`;
        const { url } = await uploadToS3({
            folder: "signMinute",
            fileName,
            fileBuffer: pdfBuffer,
            contentType: "application/pdf",
        });

        console.log("‚úÖ Upload file k√Ω xong l√™n S3:", url);

        const meetingRef = db
            .collection("meetings")
            .where("minutes.envelopeId", "==", envelopeId);
        const meetingSnap = await meetingRef.get();

        if (meetingSnap.empty) {
            console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y meeting c√≥ envelopeId:", envelopeId);
        } else {
            for (const doc of meetingSnap.docs) {
                await doc.ref.update({
                    "minutes.signedMinute": url, 
                    status: "signed",          
                });

                console.log(`üî• ƒê√£ c·∫≠p nh·∫≠t meeting ${doc.id}`);
            }
        }

        res.status(200).json({ success: true, message: "Webhook x·ª≠ l√Ω xong." });
    } catch (err) {
        res.status(500).json({ success: false, error: err.message });
    }
}
